/// <reference types="multer" />
import { tsRequest } from 'src/shared/requestModify/request.config';
import { createProductDto } from './dto/createProduct.dto';
import { updateProductDto } from './dto/updateProduct.dto';
import { ProductService } from './product.service';
export declare class ProductController {
    private productService;
    constructor(productService: ProductService);
    createProduct(req: tsRequest, body: createProductDto, file: Array<Express.Multer.File>): Promise<import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        BID: number;
        SID: number;
        CID: number;
        sku: string;
        description: string;
        content: string;
        isHome: boolean;
        saled: number;
        quantity: number;
        price: number;
        estimatedPrice: number;
        size: string;
        location: string;
        contact: string;
        image: string[];
        isActive: boolean;
    }, unknown, never> & {}>;
    editProduct(id: number, req: tsRequest, body: updateProductDto, file: Array<Express.Multer.File>): Promise<import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        BID: number;
        SID: number;
        CID: number;
        sku: string;
        description: string;
        content: string;
        isHome: boolean;
        saled: number;
        quantity: number;
        price: number;
        estimatedPrice: number;
        size: string;
        location: string;
        contact: string;
        image: string[];
        isActive: boolean;
    }, unknown, never> & {}>;
    getList(query: any): Promise<(import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        BID: number;
        SID: number;
        CID: number;
        sku: string;
        description: string;
        content: string;
        isHome: boolean;
        saled: number;
        quantity: number;
        price: number;
        estimatedPrice: number;
        size: string;
        location: string;
        contact: string;
        image: string[];
        isActive: boolean;
    }, unknown, never> & {})[]>;
    deleteProduct(id: number): Promise<import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        BID: number;
        SID: number;
        CID: number;
        sku: string;
        description: string;
        content: string;
        isHome: boolean;
        saled: number;
        quantity: number;
        price: number;
        estimatedPrice: number;
        size: string;
        location: string;
        contact: string;
        image: string[];
        isActive: boolean;
    }, unknown, never> & {}>;
    getProduct(id: number): Promise<{
        sale_off: import("@prisma/client/runtime").GetResult<{
            id: number;
            createdAt: Date;
            updatedAt: Date;
            amount: number;
            quantity: number;
            start: Date;
            end: Date;
            PID: number;
        }, unknown, never> & {};
    } & import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        BID: number;
        SID: number;
        CID: number;
        sku: string;
        description: string;
        content: string;
        isHome: boolean;
        saled: number;
        quantity: number;
        price: number;
        estimatedPrice: number;
        size: string;
        location: string;
        contact: string;
        image: string[];
        isActive: boolean;
    }, unknown, never> & {}>;
    search(searchTxt: string): Promise<(import("@prisma/client/runtime").GetResult<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        BID: number;
        SID: number;
        CID: number;
        sku: string;
        description: string;
        content: string;
        isHome: boolean;
        saled: number;
        quantity: number;
        price: number;
        estimatedPrice: number;
        size: string;
        location: string;
        contact: string;
        image: string[];
        isActive: boolean;
    }, unknown, never> & {})[]>;
}
